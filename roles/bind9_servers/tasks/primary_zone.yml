---
# Tasks that get performed on every zone
- name: "Primary zone : Check for the associated TSIG file for {{ zone.name }}."
  ansible.builtin.stat:
    path: "/etc/bind/tsig.{{ zone.name }}"
  register: zone_tsig_file
  when: zone.allowed_tsig_keys is defined

- name: "Primary zone : Generate missing TSIG Keys for {{ zone.name }}."
  ansible.builtin.shell: "tsig-keygen -a {{ bind9_servers_tsig_algorithm }} {{
    zone.name }}.key > /etc/bind/tsig.{{ zone.name }}"
  changed_when: true
  when:
    - zone.allowed_tsig_keys is defined
    - not zone_tsig_file.stat.exists

- name: "Primary zone : Get the current serial number from the zone file for {{ zone.name }}."
  ansible.builtin.command: # noqa: command-instead-of-module
    cmd: "sed -n 's#\\s*\\([[:digit:]]*\\)\\s*;\\s*serial#\\1#p' /var/cache/bind/local.db.{{ zone.name }}"
  changed_when: false
  failed_when: false
  register: zone_serial

# Use of 'force' here, prevents the file from being updated if it exists and the zone is dynamic.
# A zone is considred dynamic when 'allowed_tsig_keys' is defined.
# The setting seems backwards but is correct, as we want to force the update when dynamic is false.
- name: "Primary zone : Create local.db.zone files, ignoring changes to dynamic zones for {{ zone.name }}."
  ansible.builtin.template:
    src: zone.file.j2
    dest: "/var/cache/bind/local.db.{{ zone.name }}"
    force: "{{ zone.allowed_tsig_keys is not defined }}"
    group: bind
    owner: bind
    mode: "0644"
  notify:
    - Reload bind9
  register: local_zone_file

# Because the above registered variable gets changed with each loop including this file,
# there is no good way to make this a handler.
- name: "Primary zone : Update the serial number if zone file changed for {{ zone.name }}."
  ansible.builtin.lineinfile:
    line: "\t\t\t\t{{ ansible_date_time.epoch }} ; serial"
    path: "/var/cache/bind/local.db.{{ zone.name }}"
    regexp: " ; serial$"
  notify: Reload bind9
  when: local_zone_file.changed # noqa: no-handler
